# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# see https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

clone_depth: 5

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\misc\\appveyor\\run_with_env.cmd"
    OBSPY_VERSION: "1.0.3"
    PYTHON_VERSION: "3.6"

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_ARCH: "64"
      CONDA_PLATFORM: "win-64"
      CONDA_PYSUFFIX: "py27"

    - PYTHON: "C:\\Miniconda36"
      PYTHON_ARCH: "32"
      CONDA_PLATFORM: "win-32"
      CONDA_PYSUFFIX: "py27"

platform:
  - x64
  - x86

matrix:
  # we have two dimensions in the matrix, platform (64/32bit) and the corresponding env settings for 64/32bit
  # of course we only want to build 64/64bit and 32/32bit combination..
  exclude:
    - platform: x64
      PYTHON_ARCH: "32"
    - platform: x86
      PYTHON_ARCH: "64"

install:
  # Prepend Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # Check that we have the expected version and architecture for Python
  - "python -c \"import sys; print(sys.version)\""
  # Install the build and runtime dependencies of the project.
  - "conda update -q --yes conda"
  # Install constructor
  - "conda install -q --yes constructor"
  # list package versions
  - "conda list"
  # patch constructor's makensis call to maximum verbosity, see conda/constructor#94
  - "python patch_makensis_verbosity.py"
  # build installer
  - "constructor --verbose --platform=%CONDA_PLATFORM% %OBSPY_VERSION%_%CONDA_PYSUFFIX%"

# Not a .NET project, we build ObsPy in the install step instead
build: false

test_script:
  - ps: "ls ObsPy*.exe"
  - "for %%# in (ObsPy*.exe) do set \"file_name=%%~nx#\""
  - "echo %file_name%"
  # instructions for silent installation of Anaconda installer: https://conda.io/docs/help/silent.html
  - "start /wait \"\" %file_name% /InstallationType=JustMe /RegisterPython=0 /AddToPath=1 /S /D=C:\\ObsPy-Anaconda"
  # XXX - "C:\\ObsPy-Anaconda\\python -m obspy.scripts.runtests --no-flake8 -n anaconda-installers -r"
  # XXX for now only test core, to get passing tests, should be reverted!
  - "C:\\ObsPy-Anaconda\\python -m obspy.scripts.runtests --no-flake8 -n anaconda-installers -r core"

on_success:
  - ps: "ls ObsPy*.exe"

artifacts:
  - path: '**\ObsPy*.exe'

# Deploying binary installer as a release attachment seems to not work across
# repositories, i.e. we can't automatically deploy to obspy/obspy from
# obspy/anconda-installers, so rely on manually attaching installers to github
# releases..
deploy:
  release: $(OBSPY_VERSION)
  description: 'Anaconda ObsPy installers'
  provider: GitHub
  auth_token:
    secure: PAE+Y4BDSdConf033yv0vKhmeIevni93HJAX1qg/FpV+IU9eeUTDCTdbHjP0lblY
  artifact: /.*\ObsPy*.exe/
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
