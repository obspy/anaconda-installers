# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# see https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

clone_depth: 5

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\misc\\appveyor\\run_with_env.cmd"
    OBSPY_VERSION: "1.0.3"

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      CONDA_PLATFORM: "win-64"
      CONDA_PYSUFFIX: "py27"

    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      CONDA_PLATFORM: "win-32"
      CONDA_PYSUFFIX: "py27"

    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      CONDA_PLATFORM: "win-64"
      CONDA_PYSUFFIX: "py35"

    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
      CONDA_PLATFORM: "win-32"
      CONDA_PYSUFFIX: "py35"

platform:
  - x64
  - x86

matrix:
  # we have two dimensions in the matrix, platform (64/32bit) and the corresponding env settings for 64/32bit
  # of course we only want to build 64/64bit and 32/32bit combination..
  exclude:
    - platform: x64
      PYTHON_ARCH: "32"
    - platform: x86
      PYTHON_ARCH: "64"

install:
  # Prepend Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # Check that we have the expected version and architecture for Python
  - "python -c \"import sys; print(sys.version)\""
  # Install the build and runtime dependencies of the project.
  - "conda update -q --yes conda"
  - "conda config --add channels conda-forge"
  - "conda config --add channels conda-forge"
  - "conda info -a"
  - "conda create -q --yes -n test python=%PYTHON_VERSION%"
  - "activate test"
  - "conda install --yes obspy==%OBSPY_VERSION%"
  # list package versions
  - "conda env export"
  - "conda list --explicit"

# Not a .NET project, we build ObsPy in the install step instead
build: false

test_script:
  # XXX - "C:\\ObsPy-Anaconda\\python -m obspy.scripts.runtests --no-flake8 -n anaconda-installers -r"
  # XXX for now only test core, to get passing tests, should be reverted!
  - "python -m obspy.scripts.runtests --no-flake8 -n anaconda-installers -r core"
